// Code generated by goctl. DO NOT EDIT.

package odinNode

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	odinNodeFieldNames          = builder.RawFieldNames(&OdinNode{})
	odinNodeRows                = strings.Join(odinNodeFieldNames, ",")
	odinNodeRowsExpectAutoSet   = strings.Join(stringx.Remove(odinNodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	odinNodeRowsWithPlaceHolder = strings.Join(stringx.Remove(odinNodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	odinNodeModel interface {
		Insert(ctx context.Context, data *OdinNode) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OdinNode, error)
		Update(ctx context.Context, data *OdinNode) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOdinNodeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OdinNode struct {
		Id          int64          `db:"id"`
		Name        sql.NullString `db:"name"`
		Ns          sql.NullString `db:"ns"`
		Category    sql.NullString `db:"category"`
		Product     sql.NullString `db:"product"`
		Region      sql.NullString `db:"region"`
		Statefulapp sql.NullString `db:"statefulapp"`
		Cpu         sql.NullInt64  `db:"cpu"`
		Mem         sql.NullInt64  `db:"mem"`
		CreatedAt   sql.NullTime   `db:"created_at"`
		UpdatedAt   sql.NullTime   `db:"updated_at"`
		Extra       sql.NullString `db:"extra"`
	}
)

func newOdinNodeModel(conn sqlx.SqlConn) *defaultOdinNodeModel {
	return &defaultOdinNodeModel{
		conn:  conn,
		table: "`odin_node`",
	}
}

func (m *defaultOdinNodeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOdinNodeModel) FindOne(ctx context.Context, id int64) (*OdinNode, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", odinNodeRows, m.table)
	var resp OdinNode
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOdinNodeModel) Insert(ctx context.Context, data *OdinNode) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, odinNodeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Ns, data.Category, data.Product, data.Region, data.Statefulapp, data.Cpu, data.Mem, data.Extra)
	return ret, err
}

func (m *defaultOdinNodeModel) Update(ctx context.Context, data *OdinNode) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, odinNodeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Ns, data.Category, data.Product, data.Region, data.Statefulapp, data.Cpu, data.Mem, data.Extra, data.Id)
	return err
}

func (m *defaultOdinNodeModel) tableName() string {
	return m.table
}
